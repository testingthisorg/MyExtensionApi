// <auto-generated />
using System;
using Assassins.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Assassins.DataAccess.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20190618172411_initial-migration")]
    partial class initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Assassins.DataModels.Actions.Action", b =>
                {
                    b.Property<int>("AaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("action_type_id");

                    b.Property<long?>("campaign_insight_id");

                    b.Property<double>("value");

                    b.HasKey("AaId");

                    b.HasIndex("action_type_id");

                    b.HasIndex("campaign_insight_id");

                    b.ToTable("Actions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Action");
                });

            modelBuilder.Entity("Assassins.DataModels.Actions.ActionType", b =>
                {
                    b.Property<int>("AaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("action_type");

                    b.HasKey("AaId");

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("Assassins.DataModels.AdAccounts.AdAccount", b =>
                {
                    b.Property<long>("account_id");

                    b.Property<int>("AppUserId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("RecordDate");

                    b.Property<int>("account_status");

                    b.Property<double>("age");

                    b.Property<long>("amount_spent");

                    b.Property<double>("balance");

                    b.Property<string>("business_city");

                    b.Property<string>("business_country_code");

                    b.Property<long?>("business_id");

                    b.Property<string>("business_name");

                    b.Property<string>("business_street");

                    b.Property<string>("business_street2");

                    b.Property<DateTime>("created_time");

                    b.Property<string>("currency");

                    b.Property<int>("disable_reason");

                    b.Property<decimal>("end_advertiser")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<string>("end_advertiser_name");

                    b.Property<int>("fb_entity");

                    b.Property<int>("min_campaign_group_spend_cap");

                    b.Property<int>("min_daily_budget");

                    b.Property<string>("name");

                    b.Property<decimal>("owner")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<int>("spend_cap");

                    b.Property<int>("timezone_id");

                    b.Property<string>("timezone_name");

                    b.Property<int>("timezone_offset_hours_utc");

                    b.HasKey("account_id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("business_id");

                    b.ToTable("AdAccounts");
                });

            modelBuilder.Entity("Assassins.DataModels.AdAccounts.AttributionSpec", b =>
                {
                    b.Property<int>("AaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("account_id");

                    b.Property<string>("event_type");

                    b.Property<int>("window_days");

                    b.HasKey("AaId");

                    b.HasIndex("account_id");

                    b.ToTable("AttributionSpecs");
                });

            modelBuilder.Entity("Assassins.DataModels.AdAccounts.Business", b =>
                {
                    b.Property<long>("id");

                    b.Property<string>("name");

                    b.HasKey("id");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("Assassins.DataModels.AdSets.AdSet", b =>
                {
                    b.Property<int>("AaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("campaign_id");

                    b.HasKey("AaId");

                    b.HasIndex("campaign_id");

                    b.ToTable("AdSets");
                });

            modelBuilder.Entity("Assassins.DataModels.AppUsers.AppRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("RoleId");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "Assassins Club Free"
                        },
                        new
                        {
                            RoleId = 3,
                            Name = "Assassins Club Premium"
                        },
                        new
                        {
                            RoleId = 4,
                            Name = "Assassins Club Platinum"
                        });
                });

            modelBuilder.Entity("Assassins.DataModels.AppUsers.AppUser", b =>
                {
                    b.Property<int>("AppUserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdAssassinId");

                    b.Property<string>("AvatarUrl");

                    b.Property<string>("CreatedBy");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<string>("ExternalId");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSuspended");

                    b.Property<string>("LastName");

                    b.Property<string>("ModifiedBy");

                    b.Property<int>("ModifiedById");

                    b.Property<DateTime>("ModifiedOn");

                    b.HasKey("AppUserId");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            AppUserId = 1,
                            AvatarUrl = "http://free-icon-rainbow.com/i/icon_04062/icon_040629_64.png",
                            CreatedBy = "joe.jordan@assassinsclub.com",
                            CreatedById = 2,
                            CreatedOn = new DateTime(1980, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "system@assassinsclub.com",
                            ExternalId = "8BNz8FqTVGVjYyXudC6DSZkpiws1",
                            FirstName = "System",
                            IsDeleted = false,
                            IsSuspended = false,
                            LastName = "Bot",
                            ModifiedBy = "joe.jordan@assassinsclub.com",
                            ModifiedById = 2,
                            ModifiedOn = new DateTime(1980, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AppUserId = 2,
                            AvatarUrl = "https://i0.wp.com/cdn.auth0.com/avatars/dj.png?ssl=1",
                            CreatedBy = "system@assassinsclub.com",
                            CreatedById = 1,
                            CreatedOn = new DateTime(1980, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "joe.jordan@outlook.com",
                            ExternalId = "lv9iYbUYKdRQ0i700sVt9ZjVFps1",
                            FirstName = "Joe",
                            IsDeleted = false,
                            IsSuspended = false,
                            LastName = "Jordan",
                            ModifiedBy = "system@assassinsclub.com",
                            ModifiedById = 1,
                            ModifiedOn = new DateTime(1980, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AppUserId = 3,
                            AvatarUrl = "https://i0.wp.com/cdn.auth0.com/avatars/jj.png?ssl=1",
                            CreatedBy = "system@assassinsclub.com",
                            CreatedById = 1,
                            CreatedOn = new DateTime(1980, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "joe.jordan25@gmail.com",
                            ExternalId = "x1EZhRH3tVfwTEsE2f2nHJce4yy2",
                            FirstName = "Joe",
                            IsDeleted = false,
                            IsSuspended = false,
                            LastName = "Jordan",
                            ModifiedBy = "system@assassinsclub.com",
                            ModifiedById = 1,
                            ModifiedOn = new DateTime(1980, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Assassins.DataModels.AppUsers.AppUserDataSync", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AdAccountsCompleted");

                    b.Property<bool>("AdSetsCompleted");

                    b.Property<bool>("AdsCompleted");

                    b.Property<int>("AppUserId");

                    b.Property<bool>("CampaignsCompleted");

                    b.Property<bool>("CreativesCompleted");

                    b.Property<DateTime?>("EndTime");

                    b.Property<bool>("LeadFormsCompleted");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("AppUserDataSync");
                });

            modelBuilder.Entity("Assassins.DataModels.AppUsers.AppUserRole", b =>
                {
                    b.Property<int>("AppUserId");

                    b.Property<int>("RoleId");

                    b.HasKey("AppUserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRole");

                    b.HasData(
                        new
                        {
                            AppUserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            AppUserId = 2,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Assassins.DataModels.Campaigns.Campaign", b =>
                {
                    b.Property<long>("id");

                    b.Property<int>("AppUserId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("RecordDate");

                    b.Property<long>("account_id");

                    b.Property<bool>("budget_rebalance_flag");

                    b.Property<int>("budget_remaining");

                    b.Property<string>("buying_type");

                    b.Property<bool>("can_create_brand_lift_study");

                    b.Property<bool>("can_use_spend_cap");

                    b.Property<string>("configured_status");

                    b.Property<DateTime>("created_time");

                    b.Property<string>("effective_status");

                    b.Property<string>("name");

                    b.Property<string>("objective");

                    b.Property<decimal>("source_campaign_id")
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<DateTime>("start_time");

                    b.Property<string>("status");

                    b.Property<DateTime?>("stop_time");

                    b.Property<DateTime?>("updated_time");

                    b.HasKey("id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("account_id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Assassins.DataModels.Campaigns.CampaignInsight", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("buying_type");

                    b.Property<long>("campaign_id");

                    b.Property<int>("clicks");

                    b.Property<double>("cost_per_inline_link_click");

                    b.Property<double>("cost_per_inline_post_engagement");

                    b.Property<double>("cost_per_unique_click");

                    b.Property<double>("cost_per_unique_inline_link_click");

                    b.Property<double>("cpc");

                    b.Property<double>("cpm");

                    b.Property<double>("cpp");

                    b.Property<double>("ctr");

                    b.Property<DateTime>("date_start");

                    b.Property<DateTime>("date_stop");

                    b.Property<double>("frequency");

                    b.Property<long>("impressions");

                    b.Property<double>("inline_link_click_ctr");

                    b.Property<long>("inline_link_clicks");

                    b.Property<long>("inline_post_engagement");

                    b.Property<long>("instant_experience_clicks_to_open");

                    b.Property<long>("instant_experience_clicks_to_start");

                    b.Property<long>("instant_experience_outbound_clicks");

                    b.Property<string>("objective");

                    b.Property<long>("reach");

                    b.Property<double>("social_spend");

                    b.Property<double>("spend");

                    b.Property<long>("unique_clicks");

                    b.Property<double>("unique_ctr");

                    b.Property<double>("unique_inline_link_click_ctr");

                    b.Property<long>("unique_inline_link_clicks");

                    b.Property<double>("unique_link_clicks_ctr");

                    b.HasKey("id");

                    b.HasIndex("campaign_id");

                    b.ToTable("CampaignInsights");
                });

            modelBuilder.Entity("Assassins.DataModels.Actions.CostPer10SecVideoView", b =>
                {
                    b.HasBaseType("Assassins.DataModels.Actions.Action");

                    b.HasDiscriminator().HasValue("CostPer10SecVideoView");
                });

            modelBuilder.Entity("Assassins.DataModels.Actions.CostPerActionType", b =>
                {
                    b.HasBaseType("Assassins.DataModels.Actions.Action");

                    b.HasDiscriminator().HasValue("CostPerActionType");
                });

            modelBuilder.Entity("Assassins.DataModels.Actions.CostPerThroughPlay", b =>
                {
                    b.HasBaseType("Assassins.DataModels.Actions.Action");

                    b.HasDiscriminator().HasValue("CostPerThroughPlay");
                });

            modelBuilder.Entity("Assassins.DataModels.Actions.CostPerUniqueActionType", b =>
                {
                    b.HasBaseType("Assassins.DataModels.Actions.Action");

                    b.HasDiscriminator().HasValue("CostPerUniqueActionType");
                });

            modelBuilder.Entity("Assassins.DataModels.Actions.UniqueAction", b =>
                {
                    b.HasBaseType("Assassins.DataModels.Actions.Action");

                    b.HasDiscriminator().HasValue("UniqueAction");
                });

            modelBuilder.Entity("Assassins.DataModels.Actions.Video10SecWatchedAction", b =>
                {
                    b.HasBaseType("Assassins.DataModels.Actions.Action");

                    b.HasDiscriminator().HasValue("Video10SecWatchedAction");
                });

            modelBuilder.Entity("Assassins.DataModels.Actions.Video30SecWatchedAction", b =>
                {
                    b.HasBaseType("Assassins.DataModels.Actions.Action");

                    b.HasDiscriminator().HasValue("Video30SecWatchedAction");
                });

            modelBuilder.Entity("Assassins.DataModels.Actions.VideoAvgPercentWatchedAction", b =>
                {
                    b.HasBaseType("Assassins.DataModels.Actions.Action");

                    b.HasDiscriminator().HasValue("VideoAvgPercentWatchedAction");
                });

            modelBuilder.Entity("Assassins.DataModels.Actions.VideoAvgTimeWatchedAction", b =>
                {
                    b.HasBaseType("Assassins.DataModels.Actions.Action");

                    b.HasDiscriminator().HasValue("VideoAvgTimeWatchedAction");
                });

            modelBuilder.Entity("Assassins.DataModels.Actions.VideoP100WatchedAction", b =>
                {
                    b.HasBaseType("Assassins.DataModels.Actions.Action");

                    b.HasDiscriminator().HasValue("VideoP100WatchedAction");
                });

            modelBuilder.Entity("Assassins.DataModels.Actions.VideoP25WatchedAction", b =>
                {
                    b.HasBaseType("Assassins.DataModels.Actions.Action");

                    b.HasDiscriminator().HasValue("VideoP25WatchedAction");
                });

            modelBuilder.Entity("Assassins.DataModels.Actions.VideoP50WatchedAction", b =>
                {
                    b.HasBaseType("Assassins.DataModels.Actions.Action");

                    b.HasDiscriminator().HasValue("VideoP50WatchedAction");
                });

            modelBuilder.Entity("Assassins.DataModels.Actions.VideoP75WatchedAction", b =>
                {
                    b.HasBaseType("Assassins.DataModels.Actions.Action");

                    b.HasDiscriminator().HasValue("VideoP75WatchedAction");
                });

            modelBuilder.Entity("Assassins.DataModels.Actions.VideoP95WatchedAction", b =>
                {
                    b.HasBaseType("Assassins.DataModels.Actions.Action");

                    b.HasDiscriminator().HasValue("VideoP95WatchedAction");
                });

            modelBuilder.Entity("Assassins.DataModels.Actions.VideoThruPlayWatchedAction", b =>
                {
                    b.HasBaseType("Assassins.DataModels.Actions.Action");

                    b.HasDiscriminator().HasValue("VideoThruPlayWatchedAction");
                });

            modelBuilder.Entity("Assassins.DataModels.Campaigns.WebsiteCtr", b =>
                {
                    b.HasBaseType("Assassins.DataModels.Actions.Action");

                    b.HasDiscriminator().HasValue("WebsiteCtr");
                });

            modelBuilder.Entity("Assassins.DataModels.Actions.Action", b =>
                {
                    b.HasOne("Assassins.DataModels.Actions.ActionType", "action_type")
                        .WithMany("Actions")
                        .HasForeignKey("action_type_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Assassins.DataModels.Campaigns.CampaignInsight", "CampaignInsight")
                        .WithMany("actions")
                        .HasForeignKey("campaign_insight_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Assassins.DataModels.AdAccounts.AdAccount", b =>
                {
                    b.HasOne("Assassins.DataModels.AppUsers.AppUser", "AppUser")
                        .WithMany("AdAccounts")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Assassins.DataModels.AdAccounts.Business", "business")
                        .WithMany("AdAccounts")
                        .HasForeignKey("business_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Assassins.DataModels.AdAccounts.AttributionSpec", b =>
                {
                    b.HasOne("Assassins.DataModels.AdAccounts.AdAccount", "AdAccount")
                        .WithMany("attribution_spec")
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Assassins.DataModels.AdSets.AdSet", b =>
                {
                    b.HasOne("Assassins.DataModels.Campaigns.Campaign", "Campaign")
                        .WithMany("adsets")
                        .HasForeignKey("campaign_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Assassins.DataModels.AppUsers.AppUserDataSync", b =>
                {
                    b.HasOne("Assassins.DataModels.AppUsers.AppUser", "AppUser")
                        .WithMany("DataSyncs")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Assassins.DataModels.AppUsers.AppUserRole", b =>
                {
                    b.HasOne("Assassins.DataModels.AppUsers.AppUser", "AppUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Assassins.DataModels.AppUsers.AppRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Assassins.DataModels.Campaigns.Campaign", b =>
                {
                    b.HasOne("Assassins.DataModels.AppUsers.AppUser", "AppUser")
                        .WithMany("Campaigns")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Assassins.DataModels.AdAccounts.AdAccount", "AdAccount")
                        .WithMany("campaigns")
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Assassins.DataModels.Campaigns.CampaignInsight", b =>
                {
                    b.HasOne("Assassins.DataModels.Campaigns.Campaign", "Campaign")
                        .WithMany("CampaignInsights")
                        .HasForeignKey("campaign_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
